version: '3.8'

services:
 
  app-postgres:
    image: postgres:14.1-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes: 
      - ./.data/postgres:/var/lib/postgresql/data


  order-service:
    container_name: order-service
    build:
      dockerfile: Dockerfile
      context: apps/order_ms
      # Only will build development stage from our dockerfile
      target: development
      # target: production
    volumes:
      - ./apps/order_ms:/backend/apps/order_ms
      - orderms_backend_node_modules:/backend/apps/order_ms/node_modules
      # - ./.data/backend:/sample/data
      # - ./credentials:/usr/credentials
    # Run in Debug Mode: npm run start:debug --> Don't forget to start your vscode debugger!
    # Run in dev Mode: npm run start:dev
    # command: npm run start:debug
    # command: npm start
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.75'
    #       memory: 1000M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 700M
    # depends_on: 
    #   - sample-postgres
    #   # - sample-mongo
    environment:
      NODE_ENV: development
      NODE_PORT: 3000
      GLOBAL_PRESET: v1/api
      POSTGRES_HOST: app-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: order-db
      POSTGRES_SSH: false
      # DATA_DIR: /sample/data
      ENCRYPTION_KEY: YourSecretKey
      ENCRYPTION_ALGORITHM: aes-256-cbc
      SWAGGER_ENABLED: false

    ports:
      - 8881:3000
      - 9229:9229 # debugging port
  

  billing-service:
    container_name: billing-service
    build:
      dockerfile: Dockerfile
      context: apps/billing_ms
      # Only will build development stage from our dockerfile
      target: development
      # target: production
    volumes:
      - ./apps/billing_ms:/backend/apps/billing_ms
      - billingms_backend_node_modules:/backend/apps/billing_ms/node_modules
      # - ./.data/backend:/sample/data
      # - ./credentials:/usr/credentials
    # Run in Debug Mode: npm run start:debug --> Don't forget to start your vscode debugger!
    # Run in dev Mode: npm run start:dev
    # command: npm run start:debug
    # command: npm start
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.75'
    #       memory: 1000M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 700M
    # depends_on: 
    #   - sample-postgres
    #   # - sample-mongo
    environment:
      NODE_ENV: development
      NODE_PORT: 3001
      GLOBAL_PRESET: v1/api
      POSTGRES_HOST: app-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: billing-db
      POSTGRES_SSH: false
      # DATA_DIR: /sample/data
      ENCRYPTION_KEY: YourSecretKey
      ENCRYPTION_ALGORITHM: aes-256-cbc
      SWAGGER_ENABLED: false

    ports:
      - 8881:3000
      - 9229:9229 # debugging port
  


  auth-service:
    container_name: auth-service
    build:
      dockerfile: Dockerfile
      context: apps/backend
      # Only will build development stage from our dockerfile
      target: development
      # target: production
    volumes:
      - ./apps/backend:/sample/apps/backend
      - backend_node_modules:/sample/apps/backend/node_modules
      - ./.data/backend:/sample/data
      - ./credentials:/usr/credentials
    # Run in Debug Mode: npm run start:debug --> Don't forget to start your vscode debugger!
    # Run in dev Mode: npm run start:dev
    # command: npm run start:debug
    # command: npm start
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.75'
    #       memory: 1000M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 700M
    depends_on: 
      - sample-postgres
      # - sample-mongo
    environment:
      NODE_ENV: development
      NODE_PORT: 3002
      GLOBAL_PRESET: v1/api
      POSTGRES_HOST: sample-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: test
      POSTGRES_SSH: false
      DATA_DIR: /sample/data
      ENCRYPTION_KEY: YourSecretKey
      ENCRYPTION_ALGORITHM: aes-256-cbc
      SWAGGER_ENABLED: false

    ports:
      - 8881:3000
      - 9229:9229 # debugging port
  
